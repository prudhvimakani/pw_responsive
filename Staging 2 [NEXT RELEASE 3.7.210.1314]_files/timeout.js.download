
try {
    var timeoutMinutes = sessionTimeout;
} catch (e) {
    if (e instanceof ReferenceError) {
        var timeoutMinutes = 180;
        console.log("variable sessionTimeout not defined. Timeout set to 180. Ensure that timeout_wrapper.jsp is being used in place of timeout.js")
    }
}

var WM_acceptsCookies = false;

if (document.cookie == '') {
    document.cookie = 'WM_acceptsCookies=yes'; // Try to set a cookie.
    if (document.cookie.indexOf('WM_acceptsCookies=yes') != -1) {
        WM_acceptsCookies = true;
    }// If it succeeds, set variable
} else { // there was already a cookie
    WM_acceptsCookies = true;
}


function WM_setCookie(name, value, minutes, path, domain, secure) {
    if (WM_acceptsCookies) { // Proceed only if browser accepts cookies
        if (minutes) {
            if ((typeof(minutes) == 'string') && Date.parse(minutes)) { // already a Date string
                var expireIn = minutes;
            } else if (typeof(minutes) == 'number') { // calculate Date from number of hours
                var expireIn = (new Date((new Date()).getTime() + minutes * 60000)).toGMTString(); // Assigned in milliseconds: 60,000 ms per minute
            }
        }
        document.cookie = name + '=' + encodeURI(value) + ((expireIn) ? (';expires=' + expireIn) : '') + ((path) ? ';path=' + path : '') + ((domain) ? ';domain=' + domain : '') + ((secure && (secure == true)) ? '; secure' : ''); // Set the cookie, adding any parameters that were specified.
    }
}


function WM_readCookie(name) {
    if (document.cookie == '') { // there's no cookie, so go no further
        return false;
    } else { // there is a cookie
        var firstChar, lastChar;
        var theBigCookie = document.cookie;
        firstChar = theBigCookie.indexOf(name);	// find the start of 'name'
        var NN2Hack = firstChar + name.length;
        if ((firstChar != -1) && (theBigCookie.charAt(NN2Hack) == '=')) { // if you found the cookie
            firstChar += name.length + 1; // skip 'name' and '='
            lastChar = theBigCookie.indexOf(';', firstChar); // Find the end of the value string (i.e. the next ';').
            if (lastChar == -1) lastChar = theBigCookie.length;
            return unescape(theBigCookie.substring(firstChar, lastChar));
        } else { // If there was no cookie of that name, return false.
            return false;
        }
    }
}

function WM_killCookie(name, path, domain) {
  var theValue = WM_readCookie(name); // We need the value to kill the cookie
  if(theValue) {
      document.cookie = name + '=' + theValue + '; expires=Fri, 13-Apr-1970 00:00:00 GMT' + ((path)?';path=' + path:'') + ((domain)?';domain=' + domain:''); // set an already-expired cookie
  }
}


function persistentToggleElement( elementId ) {
    var b = toggleElement(elementId);
    WM_setCookie(elementId, b ? "block" : "none", 525600, '', '', false); // Set cookie to expire in 1 year: 525600 minutes
    toggleExpandButton(elementId);
}

// Previous functionality of checking every hour was due to paranoia about the max size of a 32 bit in which is 2,147,483,647
// Since the maximum timeout is 180 minutes, or 10,800,000 milliseconds, this is not needed
function timeoutSession() {
    if (WM_readCookie('timeoutCookie') == false){
        alert("Your session has timed out due to inactivity. For security reasons you are required to re-login.  Click okay to go to the login page. ");

        if (isSSOLogin) {
            if(ssoSignOutURL && ssoSignOutURL != ""){
                document.location.href = ssoSignOutURL;
            }else{
                document.location.href = SSORedirectUrl;
            }
        } else {
            self.location = '/pw/expired.jsp?cookie';
        }
    }
}

// Set the cookie and the timeout
WM_setCookie('timeoutCookie', 'true', timeoutMinutes, '/');
window.setTimeout('timeoutSession()', timeoutMinutes * 60000); // Session Timeout as specified in Setup > Security (in milliseconds: 60,000 ms per minute)
